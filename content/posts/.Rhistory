knitr::opts_chunk$set(echo = TRUE, cache = TRUE, dpi=300)
rm(list=ls())
d = 1:16
d3 = array(data = d,dim = c(4,2,2)) # d3 是四行两列，然后有两页
d4 = array(data = d,dim = c(4,2,2,3))  # will recycle 1:16
d3
#Similary, d4 would have two pages, and another 3 registers in a fourth dimension
ex_list = list(
a = c(1, 2, 3, 4),
b = TRUE,
c = "Hello!",
d = function(arg = 42) {print("Hello World!")},
e = diag(5)
)
ex_list[1] #returns a list contain the first element.
ex_list[[1]] #returns the first element of the list, in this case, a vector
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
# 安装包所在的位置的数据
path = system.file(package="ScPoEconometrics","datasets","example-data.csv")
example_data_from_disk = read.csv(path) #read csv 是常用的读取data frame 用的
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
# 安装包所在的位置的数据
path = system.file(package="ScPoEconometrics","datasets","example-data.csv")
#To look at data in a data.frame, we have two useful commands: head() and str().
#head() 帮助看数据的变量和结构
head(mtcars)
library(readxl)  # load the library
# total population in raw format
tot_pop_raw = read_excel(
path = system.file(package="ScPoEconometrics",
"datasets","demo_gind.xls"),
sheet="Data", # which sheet
range="A9:K68")  # which excel cell range to read
library(tidyr)   # for the gather function
#specify which columns are to be gathered: in our case, all years
#(note that paste(2008:2017) produces a vector like ["2008", "2009", "2010",...])
#say what those columns should be gathered into, i.e.
#what is the key for those values: we’ll call it year.
#Finally, what is the name of the new resulting column,
#containing the value from each cell: let’s call it counts.
tot_pop = gather(tot_pop_raw, paste(2008:2017),key="year", value = "counts")
tot_pop_raw = read_excel(
path = system.file(package="ScPoEconometrics",
"datasets","demo_gind.xls"),
sheet="Data", # which sheet
range="A9:K68")
install.packages("ScPoEconometrics")
if (!require("devtools")) install.packages("devtools")
devtools::install_github(repo = "ScPoEcon/ScPoApps")
library(ScPoApps)
devtools::install_github(repo = "ScPoEcon/ScPoApps")
library(ScPoApps)
devtools::install_github(repo = "ScPoEcon/ScPoApps")
install.packages("magick")
devtools::install_github(repo = "ScPoEcon/ScPoApps")
library(ScPoApps)
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, dpi=300)
rm(list=ls())
tot_pop_raw = read_excel(
path = system.file(package="ScPoEconometrics",
"datasets","demo_gind.xls"),
sheet="Data", # which sheet
range="A9:K68")  # which excel cell range to read
library(readxl)  # load the library
# Notice that if you installed the R package of this book,
# you have the .xls data file already at
# `system.file(package="ScPoEconometrics",
#                        "datasets","demo_gind.xls")`
# otherwise:
# * download the file to your computer
# * change the argument `path` to where you downloaded it
# you may want to change your working directory with `setwd("your/directory")
# or in RStudio by clicking Session > Set Working Directory
# total population in raw format
tot_pop_raw = read_excel(
path = system.file(package="ScPoEconometrics",
"datasets","demo_gind.xls"),
sheet="Data", # which sheet
range="A9:K68")  # which excel cell range to read
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, dpi=300)
rm(list=ls())
if (!require("devtools")) install.packages("devtools")
devtools::install_github(repo = "ScPoEcon/ScPoApps")
d = 1:16
d3 = array(data = d,dim = c(4,2,2)) # d3 是四行两列，然后有两页
d4 = array(data = d,dim = c(4,2,2,3))  # will recycle 1:16
d3
#Similary, d4 would have two pages, and another 3 registers in a fourth dimension
ex_list = list(
a = c(1, 2, 3, 4),
b = TRUE,
c = "Hello!",
d = function(arg = 42) {print("Hello World!")},
e = diag(5)
)
ex_list[1] #returns a list contain the first element.
ex_list[[1]] #returns the first element of the list, in this case, a vector
example_data = data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbye"),
z = rep(c(TRUE, FALSE), 5))
# 安装包所在的位置的数据
path = system.file(package="ScPoEconometrics","datasets","example-data.csv")
#To look at data in a data.frame, we have two useful commands: head() and str().
#head() 帮助看数据的变量和结构
head(mtcars)
library(ggplot2)
mpg$cty
table(mpg$drv)
# output the observation numbers of each species
table(mpg$drv)/nrow(mpg)
#output the percent of each category; nrow is the sum of obs
layout(matrix(c(1,2,3,4),nr=2,byrow=T))
hist(mpg$cty,
xlab   = "Miles Per Gallon (City)",
main   = "Histogram of MPG (City)", # main title
breaks = 12,   # how many breaks?
col    = "blue",
border = "black")
barplot(table(mpg$drv),
xlab   = "Drivetrain (f = FWD, r = RWD, 4 = 4WD)",
ylab   = "Frequency",
main   = "Drivetrains",
col    = "blue",
border = "black")
#However, more often we will use boxplots to compare a numerical variable
#for different values of a categorical variable.
boxplot(hwy ~ drv, data = mpg,
xlab   = "Drivetrain (f = FWD, r = RWD, 4 = 4WD)",
ylab   = "Miles Per Gallon (Highway)",
main   = "MPG (Highway) vs Drivetrain",
pch    = 20,
cex    = .5,
col    = "blue",
border = "black") #y~x
plot(hwy ~ displ, data = mpg,
xlab = "Engine Displacement (in Liters)",
ylab = "Miles Per Gallon (Highway)",
main = "MPG (Highway) vs Engine Displacement",
pch  = 20, # 点的形状
cex  = .5, # 越小点和文字越小
col  = "blue")
# plot draws the scatter plots with y against x
ggplot(data = mpg, aes(x=displ,y=hwy)) +   # ggplot() makes base plot
geom_point(color="blue",size=2) +     # how to show x and y? #geom_boxplot
ylab("Miles Per Gallon (Highway)") +  # name of y axis
xlab("Engine Displacement (in Liters)") + # x axis
theme_bw() +    # change the background
geom_smooth(method = "loess",se=TRUE)+
ggtitle("MPG (Highway) vs Engine Displacement")   # add a title
library(readr)  # you need `install.packages("readr")` once!
path = system.file(package="ScPoEconometrics","datasets","example-data.csv")
#subset
mpg[mpg$hwy>35,c("manufacturer","model","year")]
# another way
subset(mpg, subset = hwy > 35, select = c("manufacturer", "model", "year"))
# another way
library(dplyr)
mpg%>%filter(hwy>35)%>%
select(manufacturer, model, year)
library(readxl)  # load the library
# Notice that if you installed the R package of this book,
# you have the .xls data file already at
# `system.file(package="ScPoEconometrics",
#                        "datasets","demo_gind.xls")`
# otherwise:
# * download the file to your computer
# * change the argument `path` to where you downloaded it
# you may want to change your working directory with `setwd("your/directory")
# or in RStudio by clicking Session > Set Working Directory
# total population in raw format
tot_pop_raw = read_excel(
path = system.file(package="ScPoEconometrics",
"datasets","demo_gind.xls"),
sheet="Data", # which sheet
range="A9:K68")  # which excel cell range to read
library(ScPoApps)
library(ScPoApps)
d = 1:16
d3 = array(data = d,dim = c(4,2,2)) # d3 是四行两列，然后有两页
d4 = array(data = d,dim = c(4,2,2,3))  # will recycle 1:16
d3
#Similary, d4 would have two pages, and another 3 registers in a fourth dimension
library(readxl)  # load the library
# Notice that if you installed the R package of this book,
# you have the .xls data file already at
# `system.file(package="ScPoEconometrics",
#                        "datasets","demo_gind.xls")`
# otherwise:
# * download the file to your computer
# * change the argument `path` to where you downloaded it
# you may want to change your working directory with `setwd("your/directory")
# or in RStudio by clicking Session > Set Working Directory
# total population in raw format
tot_pop_raw = read_excel(
path = system.file(package="ScPoEconometrics",
"datasets","demo_gind.xls"),
sheet="Data", # which sheet
range="A9:K68")  # which excel cell range to read
library(dplyr)  # for %>%, filter, mutate, ...
# 1. take the data.frame `tot_pop`
library(ggthemes)
tot_pop %>%
# 2. pipe it into the filter function
# filter on Country being one of "France","United Kingdom" or "Italy"
filter(Country %in% c("France","United Kingdom","Italy")) %>%
# 3. pipe the result into the mutate function
# create a new column called millions
mutate(millions = counts / 1e6) %>%
# 4. pipe the result into ggplot to make a plot
#subset all data into groups and give each group its own appearance and transformation
ggplot(mapping = aes(x=year,y=millions,color=Country,group=Country)) +
geom_line(size=1)+theme_bw()
paste('hello','world','!')  #一堆单独的字符串拼接到一起
paste(c('A','B','C'),c(1,2,3)) #两个或者更多字符串对象根据元素对应关系拼接到一起
paste(1:10) #一个字符串连接在一起
paste('hello','world','!')  #一堆单独的字符串拼接到一起，如果想用‘_’连接起来
paste('hello','world','!',sep = '_')
## [1] "hello_world_!"
paste(c('A','B','C'),c(1,2,3)) #两个或者更多字符串对象根据元素对应关系拼接到一起，如果想用‘-’连接起来
paste(c('A','B','C'),c(1,2,3),sep = '-')
## [1] "A-1" "B-2" "C-3"
#此外需要注意的是如果传入的两个或多个对象的长度不一样，对应关系会发生变化，比如
paste(c('A','B','C','D','E'),c(1,2),sep = '-')
## [1] "A-1" "B-2" "C-1" "D-2" "E-1"
paste(1:10)
#一个字符串连接在一起，这第三种需求与上面很大的不同在于上面两种需求传入的都是多个对象，
#而第三种需求在函数的第一个参数位置上只传入一个对象，如果需要用‘~’连接
paste(1:10, collapse = '~')
females_raw = read_excel(
path = system.file(package="ScPoEconometrics",
"datasets","demo_gind.xls"),
sheet="Data", # which sheet
range="A141:K200",  # which excel cell range to read
na=":" )   # missing data indicator
